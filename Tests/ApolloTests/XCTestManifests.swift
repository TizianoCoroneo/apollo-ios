#if !canImport(ObjectiveC)
import XCTest

extension AutomaticPersistedQueriesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AutomaticPersistedQueriesTests = [
        ("testNotUseGETForQueriesAPQsGETRequest", testNotUseGETForQueriesAPQsGETRequest),
        ("testNotUseGETForQueriesAPQsRequest", testNotUseGETForQueriesAPQsRequest),
        ("testNotUseGETForQueriesRequest", testNotUseGETForQueriesRequest),
        ("testQueryStringForAPQsUseGetMethod", testQueryStringForAPQsUseGetMethod),
        ("testQueryStringForAPQsUseGetMethodWithVariable", testQueryStringForAPQsUseGetMethodWithVariable),
        ("testRequestBody", testRequestBody),
        ("testRequestBodyForAPQsWithVariable", testRequestBodyForAPQsWithVariable),
        ("testRequestBodyWithVariable", testRequestBodyWithVariable),
        ("testUseGETForQueriesAPQsRequest", testUseGETForQueriesAPQsRequest),
        ("testUseGETForQueriesRequest", testUseGETForQueriesRequest),
    ]
}

extension BatchedLoadTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BatchedLoadTests = [
        ("testListsAreLoadedInASingleBatch", testListsAreLoadedInASingleBatch),
        ("testParallelLoadsUseIndependentBatching", testParallelLoadsUseIndependentBatching),
    ]
}

extension CacheKeyForFieldTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CacheKeyForFieldTests = [
        ("testFieldWithAlias", testFieldWithAlias),
        ("testFieldWithAliasAndArgument", testFieldWithAliasAndArgument),
        ("testFieldWithArgument", testFieldWithArgument),
        ("testFieldWithInputObjectArgument", testFieldWithInputObjectArgument),
        ("testFieldWithInputObjectArgumentIsOrderIndependent", testFieldWithInputObjectArgumentIsOrderIndependent),
        ("testFieldWithInputObjectArgumentWithVariables", testFieldWithInputObjectArgumentWithVariables),
        ("testFieldWithMultipleArgumentsIsOrderIndependent", testFieldWithMultipleArgumentsIsOrderIndependent),
        ("testFieldWithResponseNameOnly", testFieldWithResponseNameOnly),
        ("testFieldWithVariableArgument", testFieldWithVariableArgument),
        ("testFieldWithVariableArgumentWithNil", testFieldWithVariableArgumentWithNil),
    ]
}

extension DataLoaderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DataLoaderTests = [
        ("testCachesRepeatedRequests", testCachesRepeatedRequests),
        ("testCoalescesIdenticalRequests", testCoalescesIdenticalRequests),
        ("testMultipleLoads", testMultipleLoads),
        ("testSingleLoad", testSingleLoad),
    ]
}

extension ErrorGenerationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ErrorGenerationTests = [
        ("testLocalizedStringFromErrorResponse", testLocalizedStringFromErrorResponse),
        ("testLocalizedStringFromErrorResponseWithMultipleErrors", testLocalizedStringFromErrorResponseWithMultipleErrors),
        ("testLocalizedStringFromNullDataResponse", testLocalizedStringFromNullDataResponse),
        ("testLocalizedStringFromPlaintextResponse", testLocalizedStringFromPlaintextResponse),
    ]
}

extension FragmentConstructionAndConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FragmentConstructionAndConversionTests = [
        ("testCharacterAppearsInFragmentFromJSONObjectForDroid", testCharacterAppearsInFragmentFromJSONObjectForDroid),
        ("testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForDroid", testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForDroid),
        ("testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForDroidRequiresAppearsIn", testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForDroidRequiresAppearsIn),
        ("testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForHuman", testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForHuman),
        ("testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForHumanIgnoresAppearsIn", testCharacterNameAndDroidAppearsInFragmentFromJSONObjectForHumanIgnoresAppearsIn),
        ("testCharacterNameFragmentForDroidFromJSONObject", testCharacterNameFragmentForDroidFromJSONObject),
        ("testCharacterNameFragmentForDroidFromJSONObjectWithMissingName", testCharacterNameFragmentForDroidFromJSONObjectWithMissingName),
        ("testCharacterNameFragmentForDroidFromJSONObjectWithNullName", testCharacterNameFragmentForDroidFromJSONObjectWithNullName),
        ("testCharacterNameFragmentFromJSONObjectWithMissingTypename", testCharacterNameFragmentFromJSONObjectWithMissingTypename),
        ("testCharacterNameFragmentFromJSONObjectWithUnknownTypename", testCharacterNameFragmentFromJSONObjectWithUnknownTypename),
        ("testConstructCharacterAppearsInFragmentForDroid", testConstructCharacterAppearsInFragmentForDroid),
        ("testConstructCharacterNameAndDroidAppearsInFragmentForDroid", testConstructCharacterNameAndDroidAppearsInFragmentForDroid),
        ("testConstructCharacterNameAndDroidAppearsInFragmentForHuman", testConstructCharacterNameAndDroidAppearsInFragmentForHuman),
        ("testConstructCharacterNameAndDroidPrimaryFunctionFragmentForDroid", testConstructCharacterNameAndDroidPrimaryFunctionFragmentForDroid),
        ("testConstructCharacterNameAndDroidPrimaryFunctionFragmentForHuman", testConstructCharacterNameAndDroidPrimaryFunctionFragmentForHuman),
        ("testConstructCharacterNameFragmentForDroid", testConstructCharacterNameFragmentForDroid),
        ("testConstructDroidNameAndPrimaryFunctionFragment", testConstructDroidNameAndPrimaryFunctionFragment),
        ("testConstructDroidNameFragment", testConstructDroidNameFragment),
        ("testConstructHeroDetailsFragmentWithDroidSpecificProperty", testConstructHeroDetailsFragmentWithDroidSpecificProperty),
        ("testConstructHeroDetailsFragmentWithHumanSpecificProperty", testConstructHeroDetailsFragmentWithHumanSpecificProperty),
        ("testConstructHeroDetailsFragmentWithMissingDroidSpecificProperty", testConstructHeroDetailsFragmentWithMissingDroidSpecificProperty),
        ("testConstructHeroDetailsFragmentWithMissingHumanSpecificProperty", testConstructHeroDetailsFragmentWithMissingHumanSpecificProperty),
        ("testConstructHeroDetailsFragmentWithNullDroidSpecificProperty", testConstructHeroDetailsFragmentWithNullDroidSpecificProperty),
        ("testConstructHeroDetailsFragmentWithNullHumanSpecificProperty", testConstructHeroDetailsFragmentWithNullHumanSpecificProperty),
        ("testConstructHumanHeightWithVariableFragment", testConstructHumanHeightWithVariableFragment),
        ("testConvertCharacterNameAndApearsInFragmentIntoCharacterNameFragment", testConvertCharacterNameAndApearsInFragmentIntoCharacterNameFragment),
        ("testConvertCharacterNameIntoCharacterNameAndAppearsInFragment", testConvertCharacterNameIntoCharacterNameAndAppearsInFragment),
        ("testConvertCharacterNameIntoCharacterNameAndDroidAppearsInFragment", testConvertCharacterNameIntoCharacterNameAndDroidAppearsInFragment),
        ("testConvertCharacterNameIntoCharacterNameAndDroidAppearsInFragmentForDroid", testConvertCharacterNameIntoCharacterNameAndDroidAppearsInFragmentForDroid),
        ("testConvertCharacterNameIntoCharacterNameAndDroidAppearsInFragmentForHuman", testConvertCharacterNameIntoCharacterNameAndDroidAppearsInFragmentForHuman),
        ("testConvertCharacterNameIntoDroidNameFragmentForDroid", testConvertCharacterNameIntoDroidNameFragmentForDroid),
        ("testConvertCharacterNameIntoHeroDetailsFragment", testConvertCharacterNameIntoHeroDetailsFragment),
        ("testConvertHeroDetailsIntoCharacterNameFragment", testConvertHeroDetailsIntoCharacterNameFragment),
        ("testHeroDetailsFragmentFromJSONObjectWithMissingTypeSpecificProperty", testHeroDetailsFragmentFromJSONObjectWithMissingTypeSpecificProperty),
        ("testHeroDetailsFragmentFromJSONObjectWithNullTypeSpecificProperty", testHeroDetailsFragmentFromJSONObjectWithNullTypeSpecificProperty),
        ("testHeroDetailsFragmentFromJSONObjectWithTypeSpecificProperty", testHeroDetailsFragmentFromJSONObjectWithTypeSpecificProperty),
        ("testHumanHeightWithVariableFragmentFromJSONObject", testHumanHeightWithVariableFragmentFromJSONObject),
        ("testJSONObjectFromCharacterAppearsInFragment", testJSONObjectFromCharacterAppearsInFragment),
        ("testJSONObjectFromCharacterNameAndDroidAppearsInFragmentForDroid", testJSONObjectFromCharacterNameAndDroidAppearsInFragmentForDroid),
        ("testJSONObjectFromCharacterNameAndDroidAppearsInFragmentForHuman", testJSONObjectFromCharacterNameAndDroidAppearsInFragmentForHuman),
        ("testJSONObjectFromCharacterNameFragment", testJSONObjectFromCharacterNameFragment),
        ("testJSONObjectFromHeroDetailsFragmentWithMissingTypeSpecificProperty", testJSONObjectFromHeroDetailsFragmentWithMissingTypeSpecificProperty),
        ("testJSONObjectFromHeroDetailsFragmentWithTypeSpecificProperty", testJSONObjectFromHeroDetailsFragmentWithTypeSpecificProperty),
        ("testJSONObjectFromHumanHeightWithVariableFragment", testJSONObjectFromHumanHeightWithVariableFragment),
    ]
}

extension GETTransformerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GETTransformerTests = [
        ("testEncodingQueryWith2DNullDefaultParameter", testEncodingQueryWith2DNullDefaultParameter),
        ("testEncodingQueryWith2DParameter", testEncodingQueryWith2DParameter),
        ("testEncodingQueryWith2DWOQueryParameter", testEncodingQueryWith2DWOQueryParameter),
        ("testEncodingQueryWithMoreThanOneParameterIncludingNonHashableValue", testEncodingQueryWithMoreThanOneParameterIncludingNonHashableValue),
        ("testEncodingQueryWithNullDefaultParameter", testEncodingQueryWithNullDefaultParameter),
        ("testEncodingQueryWithSingleParameter", testEncodingQueryWithSingleParameter),
    ]
}

extension HTTPTransportTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HTTPTransportTests = [
        ("testClientNameAndVersionHeadersAreSent", testClientNameAndVersionHeadersAreSent),
        ("testEquality", testEquality),
        ("testErrorDelegateWithErrors", testErrorDelegateWithErrors),
        ("testErrorDelegateWithNoErrors", testErrorDelegateWithNoErrors),
        ("testPreflightDelegateNeitherModifyingOrStoppingRequest", testPreflightDelegateNeitherModifyingOrStoppingRequest),
        ("testPreflightDelegateTellingRequestNotToSend", testPreflightDelegateTellingRequestNotToSend),
        ("testPreflightDelgateModifyingRequest", testPreflightDelgateModifyingRequest),
        ("testRetryDelegateRetriesAfterUnsuccessfulAttempts", testRetryDelegateRetriesAfterUnsuccessfulAttempts),
    ]
}

extension InputValueEncodingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InputValueEncodingTests = [
        ("testEncodeEnumValue", testEncodeEnumValue),
        ("testEncodeInputObject", testEncodeInputObject),
        ("testEncodeInputObjectWithExplicitNilForOptionalProperty", testEncodeInputObjectWithExplicitNilForOptionalProperty),
        ("testEncodeInputObjectWithExplicitSomeNilForOptionalProperty", testEncodeInputObjectWithExplicitSomeNilForOptionalProperty),
        ("testEncodeInputObjectWithNestedInputObject", testEncodeInputObjectWithNestedInputObject),
        ("testEncodeInputObjectWithOptionalPropertyMissing", testEncodeInputObjectWithOptionalPropertyMissing),
        ("testEncodeList", testEncodeList),
        ("testEncodeMap", testEncodeMap),
        ("testEncodeOptionalList", testEncodeOptionalList),
        ("testEncodeOptionalListWithValueMissing", testEncodeOptionalListWithValueMissing),
        ("testEncodeOptionalMapWithValueMissing", testEncodeOptionalMapWithValueMissing),
        ("testEncodeOptionalValue", testEncodeOptionalValue),
        ("testEncodeOptionalValueWithExplicitNull", testEncodeOptionalValueWithExplicitNull),
        ("testEncodeOptionalValueWithValueMissing", testEncodeOptionalValueWithValueMissing),
        ("testEncodeValue", testEncodeValue),
    ]
}

extension JSONTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JSONTests = [
        ("testCouldNotConvertMatchable", testCouldNotConvertMatchable),
        ("testMissingValueMatchable", testMissingValueMatchable),
        ("testNullValueMatchable", testNullValueMatchable),
        ("testWrongTypeMatchable", testWrongTypeMatchable),
    ]
}

extension MutatingResultsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MutatingResultsTests = [
        ("testSettingNewFragment", testSettingNewFragment),
    ]
}

extension NormalizeQueryResults {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NormalizeQueryResults = [
        ("testHeroAndFriendsNamesQueryWithIDForParentOnly", testHeroAndFriendsNamesQueryWithIDForParentOnly),
        ("testHeroAndFriendsNamesQueryWithIDs", testHeroAndFriendsNamesQueryWithIDs),
        ("testHeroAndFriendsNamesQueryWithoutIDs", testHeroAndFriendsNamesQueryWithoutIDs),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldQueryDroid", testHeroTypeDependentAliasedFieldQueryDroid),
        ("testHeroTypeDependentAliasedFieldQueryHuman", testHeroTypeDependentAliasedFieldQueryHuman),
        ("testSameHeroTwiceQuery", testSameHeroTwiceQuery),
    ]
}

extension ParseQueryResponseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParseQueryResponseTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testErrorResponseWithCustomError", testErrorResponseWithCustomError),
        ("testErrorResponseWithLocation", testErrorResponseWithLocation),
        ("testErrorResponseWithoutLocation", testErrorResponseWithoutLocation),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAndFriendsNamesQueryWithEmptyList", testHeroAndFriendsNamesQueryWithEmptyList),
        ("testHeroAndFriendsNamesWithFragmentQuery", testHeroAndFriendsNamesWithFragmentQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroAppearsInQueryWithEmptyList", testHeroAppearsInQueryWithEmptyList),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsQueryMissingTypename", testHeroDetailsQueryMissingTypename),
        ("testHeroDetailsQueryUnknownTypename", testHeroDetailsQueryUnknownTypename),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithDifferentType", testHeroNameQueryWithDifferentType),
        ("testHeroNameQueryWithMissingValue", testHeroNameQueryWithMissingValue),
        ("testHeroNameQueryWithWrongType", testHeroNameQueryWithWrongType),
        ("testHumanQueryWithMissingResult", testHumanQueryWithMissingResult),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testTwoHeroesQuery", testTwoHeroesQuery),
    ]
}

extension PromiseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PromiseTests = [
        ("testAndThenPropagatesError", testAndThenPropagatesError),
        ("testCatchPropagatesError", testCatchPropagatesError),
        ("testErrorReturnedFromFlatMapIsPropagated", testErrorReturnedFromFlatMapIsPropagated),
        ("testErrorThrownFromAndThenIsPropagated", testErrorThrownFromAndThenIsPropagated),
        ("testErrorThrownFromCatchIsPropagated", testErrorThrownFromCatchIsPropagated),
        ("testErrorThrownFromMapIsPropagated", testErrorThrownFromMapIsPropagated),
        ("testFlatMapPropagatesError", testFlatMapPropagatesError),
        ("testFulfilledPromiseAndThen", testFulfilledPromiseAndThen),
        ("testMapPropagatesError", testMapPropagatesError),
        ("testRejectedPromiseCatch", testRejectedPromiseCatch),
        ("testRejectedPromiseSkipsAndThen", testRejectedPromiseSkipsAndThen),
        ("testResultOfFulfilledPromise", testResultOfFulfilledPromise),
        ("testResultOfImmediatelyFulfilledPromise", testResultOfImmediatelyFulfilledPromise),
        ("testResultOfImmediatelyRejectedPromise", testResultOfImmediatelyRejectedPromise),
        ("testResultOfRejectedPromise", testResultOfRejectedPromise),
        ("testWaitForResultOfFulfilledPromise", testWaitForResultOfFulfilledPromise),
        ("testWaitForResultOfImmediatelyFulfilledPromise", testWaitForResultOfImmediatelyFulfilledPromise),
        ("testWaitForResultOfImmediatelyRejectedPromise", testWaitForResultOfImmediatelyRejectedPromise),
        ("testWaitForResultOfRejectedPromise", testWaitForResultOfRejectedPromise),
        ("testWhenAll", testWhenAll),
        ("testWhenAllRejectsWhenAnyOfThePromisesRejects", testWhenAllRejectsWhenAnyOfThePromisesRejects),
        ("testWhenAllRejectsWhenAnyOfThePromisesRejectsAsync_doesNotCreateMemoryLeak", testWhenAllRejectsWhenAnyOfThePromisesRejectsAsync_doesNotCreateMemoryLeak),
    ]
}

extension QueryFromJSONBuildingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QueryFromJSONBuildingTests = [
        ("testConditionalInclusionQuery", testConditionalInclusionQuery),
        ("testConditionalInclusionQueryWithoutVariables", testConditionalInclusionQueryWithoutVariables),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
    ]
}

extension ReadFieldValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReadFieldValueTests = [
        ("testGetEmptyOptionalScalarList", testGetEmptyOptionalScalarList),
        ("testGetEmptyScalarList", testGetEmptyScalarList),
        ("testGetOptionalScalar", testGetOptionalScalar),
        ("testGetOptionalScalarList", testGetOptionalScalarList),
        ("testGetOptionalScalarListWithDifferentType", testGetOptionalScalarListWithDifferentType),
        ("testGetOptionalScalarListWithMissingKey", testGetOptionalScalarListWithMissingKey),
        ("testGetOptionalScalarListWithNull", testGetOptionalScalarListWithNull),
        ("testGetOptionalScalarListWithOptionalElements", testGetOptionalScalarListWithOptionalElements),
        ("testGetOptionalScalarListWithUnknownEnumCase", testGetOptionalScalarListWithUnknownEnumCase),
        ("testGetOptionalScalarListWithWrongType", testGetOptionalScalarListWithWrongType),
        ("testGetOptionalScalarWithDifferentType", testGetOptionalScalarWithDifferentType),
        ("testGetOptionalScalarWithMissingKey", testGetOptionalScalarWithMissingKey),
        ("testGetOptionalScalarWithNull", testGetOptionalScalarWithNull),
        ("testGetOptionalScalarWithWrongType", testGetOptionalScalarWithWrongType),
        ("testGetScalar", testGetScalar),
        ("testGetScalarList", testGetScalarList),
        ("testGetScalarListWithDifferentType", testGetScalarListWithDifferentType),
        ("testGetScalarListWithMissingKey", testGetScalarListWithMissingKey),
        ("testGetScalarListWithNull", testGetScalarListWithNull),
        ("testGetScalarListWithOptionalElements", testGetScalarListWithOptionalElements),
        ("testGetScalarListWithWrongType", testGetScalarListWithWrongType),
        ("testGetScalarWithDifferentType", testGetScalarWithDifferentType),
        ("testGetScalarWithMissingKey", testGetScalarWithMissingKey),
        ("testGetScalarWithNull", testGetScalarWithNull),
        ("testGetScalarWithWrongType", testGetScalarWithWrongType),
    ]
}

extension RequestCreatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RequestCreatorTests = [
        ("testBatchFile", testBatchFile),
        ("testMultifileFile", testMultifileFile),
        ("testMultipleFilesWithApolloRequestCreator", testMultipleFilesWithApolloRequestCreator),
        ("testRequestBodyWithApolloRequestCreator", testRequestBodyWithApolloRequestCreator),
        ("testRequestBodyWithCustomRequestCreator", testRequestBodyWithCustomRequestCreator),
        ("testSingleFile", testSingleFile),
        ("testSingleFileWithApolloRequestCreator", testSingleFileWithApolloRequestCreator),
        ("testSingleFileWithCustomRequestCreator", testSingleFileWithCustomRequestCreator),
    ]
}

extension ResultOrPromiseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ResultOrPromiseTests = [
        ("testFailureResult", testFailureResult),
        ("testFailureResultCatch", testFailureResultCatch),
        ("testFulfilledPromiseAndThen", testFulfilledPromiseAndThen),
        ("testRejectedPromiseCatch", testRejectedPromiseCatch),
        ("testResultOfFulfilledPromise", testResultOfFulfilledPromise),
        ("testResultOfRejectedPromise", testResultOfRejectedPromise),
        ("testSuccessResult", testSuccessResult),
        ("testSuccessResultAndThen", testSuccessResultAndThen),
        ("testWaitForFailureResult", testWaitForFailureResult),
        ("testWaitForResultOfFulfilledPromise", testWaitForResultOfFulfilledPromise),
        ("testWaitForResultOfRejectedPromise", testWaitForResultOfRejectedPromise),
        ("testWaitForSuccessResult", testWaitForSuccessResult),
        ("testWhenAllRejectsWhenAnyOfThePromisesRejects", testWhenAllRejectsWhenAnyOfThePromisesRejects),
        ("testWhenAllRejectsWhenAnyOfThePromisesRejectsInAListThatAlsoContainsSuccessResults", testWhenAllRejectsWhenAnyOfThePromisesRejectsInAListThatAlsoContainsSuccessResults),
        ("testWhenAllRejectsWhenAnyOfTheResultsIsAFailure", testWhenAllRejectsWhenAnyOfTheResultsIsAFailure),
        ("testWhenAllRejectsWhenAnyOfTheResultsIsAFailureInAListThatAlsoContainsFulfilledPromises", testWhenAllRejectsWhenAnyOfTheResultsIsAFailureInAListThatAlsoContainsFulfilledPromises),
        ("testWhenAllWithBothSuccessResultsAndFulfilledPromises", testWhenAllWithBothSuccessResultsAndFulfilledPromises),
        ("testWhenAllWithFulfilledPromises", testWhenAllWithFulfilledPromises),
        ("testWhenAllWithSuccessResults", testWhenAllWithSuccessResults),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AutomaticPersistedQueriesTests.__allTests__AutomaticPersistedQueriesTests),
        testCase(BatchedLoadTests.__allTests__BatchedLoadTests),
        testCase(CacheKeyForFieldTests.__allTests__CacheKeyForFieldTests),
        testCase(DataLoaderTests.__allTests__DataLoaderTests),
        testCase(ErrorGenerationTests.__allTests__ErrorGenerationTests),
        testCase(FragmentConstructionAndConversionTests.__allTests__FragmentConstructionAndConversionTests),
        testCase(GETTransformerTests.__allTests__GETTransformerTests),
        testCase(HTTPTransportTests.__allTests__HTTPTransportTests),
        testCase(InputValueEncodingTests.__allTests__InputValueEncodingTests),
        testCase(JSONTests.__allTests__JSONTests),
        testCase(MutatingResultsTests.__allTests__MutatingResultsTests),
        testCase(NormalizeQueryResults.__allTests__NormalizeQueryResults),
        testCase(ParseQueryResponseTests.__allTests__ParseQueryResponseTests),
        testCase(PromiseTests.__allTests__PromiseTests),
        testCase(QueryFromJSONBuildingTests.__allTests__QueryFromJSONBuildingTests),
        testCase(ReadFieldValueTests.__allTests__ReadFieldValueTests),
        testCase(RequestCreatorTests.__allTests__RequestCreatorTests),
        testCase(ResultOrPromiseTests.__allTests__ResultOrPromiseTests),
    ]
}
#endif

#if !canImport(ObjectiveC)
import XCTest

extension FetchQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FetchQueryTests = [
        ("testClearCache", testClearCache),
        ("testCompletionHandlerIsCalledOnTheSpecifiedQueue", testCompletionHandlerIsCalledOnTheSpecifiedQueue),
        ("testFetchIgnoringCacheData", testFetchIgnoringCacheData),
        ("testReturnCacheDataAndFetch", testReturnCacheDataAndFetch),
        ("testReturnCacheDataDontFetchWithCachedData", testReturnCacheDataDontFetchWithCachedData),
        ("testReturnCacheDataDontFetchWithMissingData", testReturnCacheDataDontFetchWithMissingData),
        ("testReturnCacheDataElseFetchWithCachedData", testReturnCacheDataElseFetchWithCachedData),
        ("testReturnCacheDataElseFetchWithMissingData", testReturnCacheDataElseFetchWithMissingData),
        ("testThreadedCache", testThreadedCache),
    ]
}

extension LoadQueryFromStoreTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LoadQueryFromStoreTests = [
        ("testLoadingHeroAndFriendsNamesQueryWithIDs", testLoadingHeroAndFriendsNamesQueryWithIDs),
        ("testLoadingHeroAndFriendsNamesQueryWithMissingFriends", testLoadingHeroAndFriendsNamesQueryWithMissingFriends),
        ("testLoadingHeroAndFriendsNamesQueryWithNullFriends", testLoadingHeroAndFriendsNamesQueryWithNullFriends),
        ("testLoadingHeroAndFriendsNamesQueryWithoutIDs", testLoadingHeroAndFriendsNamesQueryWithoutIDs),
        ("testLoadingHeroNameQuery", testLoadingHeroNameQuery),
        ("testLoadingHeroNameQueryWithMissingName", testLoadingHeroNameQueryWithMissingName),
        ("testLoadingHeroNameQueryWithNullName", testLoadingHeroNameQueryWithNullName),
        ("testLoadingHeroNameQueryWithVariable", testLoadingHeroNameQueryWithVariable),
        ("testLoadingQueryWithFloats", testLoadingQueryWithFloats),
        ("testLoadingWithBadCacheSerialization", testLoadingWithBadCacheSerialization),
    ]
}

extension ReadWriteFromStoreTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReadWriteFromStoreTests = [
        ("testReadFriendsNamesFragment", testReadFriendsNamesFragment),
        ("testReadHeroAndFriendsNamesQuery", testReadHeroAndFriendsNamesQuery),
        ("testReadHeroDetailsFragmentWithMissingTypeSpecificProperty", testReadHeroDetailsFragmentWithMissingTypeSpecificProperty),
        ("testReadHeroDetailsFragmentWithTypeSpecificProperty", testReadHeroDetailsFragmentWithTypeSpecificProperty),
        ("testReadHeroNameQuery", testReadHeroNameQuery),
        ("testReadHeroNameQueryWithMissingName", testReadHeroNameQueryWithMissingName),
        ("testReadHeroNameQueryWithVariable", testReadHeroNameQueryWithVariable),
        ("testUpdateFriendsNamesFragment", testUpdateFriendsNamesFragment),
        ("testUpdateHeroAndFriendsNamesQuery", testUpdateHeroAndFriendsNamesQuery),
        ("testUpdateHeroAndFriendsNamesQueryWithVariable", testUpdateHeroAndFriendsNamesQueryWithVariable),
        ("testUpdateHeroNameQuery", testUpdateHeroNameQuery),
        ("testWriteHeroNameQueryWhenWriteErrorIsThrown", testWriteHeroNameQueryWhenWriteErrorIsThrown),
    ]
}

extension SQLiteFetchQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteFetchQueryTests = [
        ("testClearCache", testClearCache),
        ("testCompletionHandlerIsCalledOnTheSpecifiedQueue", testCompletionHandlerIsCalledOnTheSpecifiedQueue),
        ("testFetchIgnoringCacheData", testFetchIgnoringCacheData),
        ("testReturnCacheDataAndFetch", testReturnCacheDataAndFetch),
        ("testReturnCacheDataDontFetchWithCachedData", testReturnCacheDataDontFetchWithCachedData),
        ("testReturnCacheDataDontFetchWithMissingData", testReturnCacheDataDontFetchWithMissingData),
        ("testReturnCacheDataElseFetchWithCachedData", testReturnCacheDataElseFetchWithCachedData),
        ("testReturnCacheDataElseFetchWithMissingData", testReturnCacheDataElseFetchWithMissingData),
        ("testThreadedCache", testThreadedCache),
    ]
}

extension SQLiteLoadQueryFromStoreTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteLoadQueryFromStoreTests = [
        ("testLoadingHeroAndFriendsNamesQueryWithIDs", testLoadingHeroAndFriendsNamesQueryWithIDs),
        ("testLoadingHeroAndFriendsNamesQueryWithMissingFriends", testLoadingHeroAndFriendsNamesQueryWithMissingFriends),
        ("testLoadingHeroAndFriendsNamesQueryWithNullFriends", testLoadingHeroAndFriendsNamesQueryWithNullFriends),
        ("testLoadingHeroAndFriendsNamesQueryWithoutIDs", testLoadingHeroAndFriendsNamesQueryWithoutIDs),
        ("testLoadingHeroNameQuery", testLoadingHeroNameQuery),
        ("testLoadingHeroNameQueryWithMissingName", testLoadingHeroNameQueryWithMissingName),
        ("testLoadingHeroNameQueryWithNullName", testLoadingHeroNameQueryWithNullName),
        ("testLoadingHeroNameQueryWithVariable", testLoadingHeroNameQueryWithVariable),
        ("testLoadingQueryWithFloats", testLoadingQueryWithFloats),
        ("testLoadingWithBadCacheSerialization", testLoadingWithBadCacheSerialization),
    ]
}

extension SQLiteReadWriteFromStoreTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteReadWriteFromStoreTests = [
        ("testReadFriendsNamesFragment", testReadFriendsNamesFragment),
        ("testReadHeroAndFriendsNamesQuery", testReadHeroAndFriendsNamesQuery),
        ("testReadHeroDetailsFragmentWithMissingTypeSpecificProperty", testReadHeroDetailsFragmentWithMissingTypeSpecificProperty),
        ("testReadHeroDetailsFragmentWithTypeSpecificProperty", testReadHeroDetailsFragmentWithTypeSpecificProperty),
        ("testReadHeroNameQuery", testReadHeroNameQuery),
        ("testReadHeroNameQueryWithMissingName", testReadHeroNameQueryWithMissingName),
        ("testReadHeroNameQueryWithVariable", testReadHeroNameQueryWithVariable),
        ("testUpdateFriendsNamesFragment", testUpdateFriendsNamesFragment),
        ("testUpdateHeroAndFriendsNamesQuery", testUpdateHeroAndFriendsNamesQuery),
        ("testUpdateHeroAndFriendsNamesQueryWithVariable", testUpdateHeroAndFriendsNamesQueryWithVariable),
        ("testUpdateHeroNameQuery", testUpdateHeroNameQuery),
        ("testWriteHeroNameQueryWhenWriteErrorIsThrown", testWriteHeroNameQueryWhenWriteErrorIsThrown),
    ]
}

extension SQLiteStarWarsServerAPQsGetMethodTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteStarWarsServerAPQsGetMethodTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testDroidDetailsWithFragmentQueryDroid", testDroidDetailsWithFragmentQueryDroid),
        ("testDroidDetailsWithFragmentQueryHuman", testDroidDetailsWithFragmentQueryHuman),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroDetailsFragmentConditionalInclusion", testHeroDetailsFragmentConditionalInclusion),
        ("testHeroDetailsInlineConditionalInclusion", testHeroDetailsInlineConditionalInclusion),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroFriendsOfFriendsNamesQuery", testHeroFriendsOfFriendsNamesQuery),
        ("testHeroNameConditionalBoth", testHeroNameConditionalBoth),
        ("testHeroNameConditionalBothSeparate", testHeroNameConditionalBothSeparate),
        ("testHeroNameConditionalExclusion", testHeroNameConditionalExclusion),
        ("testHeroNameConditionalInclusion", testHeroNameConditionalInclusion),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroNameTypeSpecificConditionalInclusion", testHeroNameTypeSpecificConditionalInclusion),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldDroid", testHeroTypeDependentAliasedFieldDroid),
        ("testHeroTypeDependentAliasedFieldHuman", testHeroTypeDependentAliasedFieldHuman),
        ("testHumanQueryWithNullMass", testHumanQueryWithNullMass),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testStarshipCoordinates", testStarshipCoordinates),
    ]
}

extension SQLiteStarWarsServerAPQsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteStarWarsServerAPQsTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testDroidDetailsWithFragmentQueryDroid", testDroidDetailsWithFragmentQueryDroid),
        ("testDroidDetailsWithFragmentQueryHuman", testDroidDetailsWithFragmentQueryHuman),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroDetailsFragmentConditionalInclusion", testHeroDetailsFragmentConditionalInclusion),
        ("testHeroDetailsInlineConditionalInclusion", testHeroDetailsInlineConditionalInclusion),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroFriendsOfFriendsNamesQuery", testHeroFriendsOfFriendsNamesQuery),
        ("testHeroNameConditionalBoth", testHeroNameConditionalBoth),
        ("testHeroNameConditionalBothSeparate", testHeroNameConditionalBothSeparate),
        ("testHeroNameConditionalExclusion", testHeroNameConditionalExclusion),
        ("testHeroNameConditionalInclusion", testHeroNameConditionalInclusion),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroNameTypeSpecificConditionalInclusion", testHeroNameTypeSpecificConditionalInclusion),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldDroid", testHeroTypeDependentAliasedFieldDroid),
        ("testHeroTypeDependentAliasedFieldHuman", testHeroTypeDependentAliasedFieldHuman),
        ("testHumanQueryWithNullMass", testHumanQueryWithNullMass),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testStarshipCoordinates", testStarshipCoordinates),
    ]
}

extension SQLiteStarWarsServerCachingRoundtripTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteStarWarsServerCachingRoundtripTests = [
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAndFriendsNamesQueryWithVariable", testHeroAndFriendsNamesQueryWithVariable),
        ("testHeroAndFriendsNamesWithIDsQuery", testHeroAndFriendsNamesWithIDsQuery),
    ]
}

extension SQLiteStarWarsServerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteStarWarsServerTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testDroidDetailsWithFragmentQueryDroid", testDroidDetailsWithFragmentQueryDroid),
        ("testDroidDetailsWithFragmentQueryHuman", testDroidDetailsWithFragmentQueryHuman),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroDetailsFragmentConditionalInclusion", testHeroDetailsFragmentConditionalInclusion),
        ("testHeroDetailsInlineConditionalInclusion", testHeroDetailsInlineConditionalInclusion),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroFriendsOfFriendsNamesQuery", testHeroFriendsOfFriendsNamesQuery),
        ("testHeroNameConditionalBoth", testHeroNameConditionalBoth),
        ("testHeroNameConditionalBothSeparate", testHeroNameConditionalBothSeparate),
        ("testHeroNameConditionalExclusion", testHeroNameConditionalExclusion),
        ("testHeroNameConditionalInclusion", testHeroNameConditionalInclusion),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroNameTypeSpecificConditionalInclusion", testHeroNameTypeSpecificConditionalInclusion),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldDroid", testHeroTypeDependentAliasedFieldDroid),
        ("testHeroTypeDependentAliasedFieldHuman", testHeroTypeDependentAliasedFieldHuman),
        ("testHumanQueryWithNullMass", testHumanQueryWithNullMass),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testStarshipCoordinates", testStarshipCoordinates),
    ]
}

extension SQLiteWatchQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SQLiteWatchQueryTests = [
        ("testRefetchWatchedQuery", testRefetchWatchedQuery),
        ("testWatchedListModifyingQueryWithID", testWatchedListModifyingQueryWithID),
        ("testWatchedQueryDoesNotRefetchAfterUnrelatedQuery", testWatchedQueryDoesNotRefetchAfterUnrelatedQuery),
        ("testWatchedQueryGetsUpdatedWithListReorderingFromOtherQuery", testWatchedQueryGetsUpdatedWithListReorderingFromOtherQuery),
        ("testWatchedQueryGetsUpdatedWithResultFromOtherQuery", testWatchedQueryGetsUpdatedWithResultFromOtherQuery),
        ("testWatchedQueryGetsUpdatedWithResultFromReadWriteTransaction", testWatchedQueryGetsUpdatedWithResultFromReadWriteTransaction),
        ("testWatchedQueryWithID", testWatchedQueryWithID),
    ]
}

extension StarWarsServerAPQsGetMethodTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StarWarsServerAPQsGetMethodTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testDroidDetailsWithFragmentQueryDroid", testDroidDetailsWithFragmentQueryDroid),
        ("testDroidDetailsWithFragmentQueryHuman", testDroidDetailsWithFragmentQueryHuman),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroDetailsFragmentConditionalInclusion", testHeroDetailsFragmentConditionalInclusion),
        ("testHeroDetailsInlineConditionalInclusion", testHeroDetailsInlineConditionalInclusion),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroFriendsOfFriendsNamesQuery", testHeroFriendsOfFriendsNamesQuery),
        ("testHeroNameConditionalBoth", testHeroNameConditionalBoth),
        ("testHeroNameConditionalBothSeparate", testHeroNameConditionalBothSeparate),
        ("testHeroNameConditionalExclusion", testHeroNameConditionalExclusion),
        ("testHeroNameConditionalInclusion", testHeroNameConditionalInclusion),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroNameTypeSpecificConditionalInclusion", testHeroNameTypeSpecificConditionalInclusion),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldDroid", testHeroTypeDependentAliasedFieldDroid),
        ("testHeroTypeDependentAliasedFieldHuman", testHeroTypeDependentAliasedFieldHuman),
        ("testHumanQueryWithNullMass", testHumanQueryWithNullMass),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testStarshipCoordinates", testStarshipCoordinates),
    ]
}

extension StarWarsServerAPQsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StarWarsServerAPQsTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testDroidDetailsWithFragmentQueryDroid", testDroidDetailsWithFragmentQueryDroid),
        ("testDroidDetailsWithFragmentQueryHuman", testDroidDetailsWithFragmentQueryHuman),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroDetailsFragmentConditionalInclusion", testHeroDetailsFragmentConditionalInclusion),
        ("testHeroDetailsInlineConditionalInclusion", testHeroDetailsInlineConditionalInclusion),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroFriendsOfFriendsNamesQuery", testHeroFriendsOfFriendsNamesQuery),
        ("testHeroNameConditionalBoth", testHeroNameConditionalBoth),
        ("testHeroNameConditionalBothSeparate", testHeroNameConditionalBothSeparate),
        ("testHeroNameConditionalExclusion", testHeroNameConditionalExclusion),
        ("testHeroNameConditionalInclusion", testHeroNameConditionalInclusion),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroNameTypeSpecificConditionalInclusion", testHeroNameTypeSpecificConditionalInclusion),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldDroid", testHeroTypeDependentAliasedFieldDroid),
        ("testHeroTypeDependentAliasedFieldHuman", testHeroTypeDependentAliasedFieldHuman),
        ("testHumanQueryWithNullMass", testHumanQueryWithNullMass),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testStarshipCoordinates", testStarshipCoordinates),
    ]
}

extension StarWarsServerCachingRoundtripTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StarWarsServerCachingRoundtripTests = [
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAndFriendsNamesQueryWithVariable", testHeroAndFriendsNamesQueryWithVariable),
        ("testHeroAndFriendsNamesWithIDsQuery", testHeroAndFriendsNamesWithIDsQuery),
    ]
}

extension StarWarsServerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StarWarsServerTests = [
        ("testCreateReviewForEpisode", testCreateReviewForEpisode),
        ("testDroidDetailsWithFragmentQueryDroid", testDroidDetailsWithFragmentQueryDroid),
        ("testDroidDetailsWithFragmentQueryHuman", testDroidDetailsWithFragmentQueryHuman),
        ("testHeroAndFriendsNamesQuery", testHeroAndFriendsNamesQuery),
        ("testHeroAppearsInQuery", testHeroAppearsInQuery),
        ("testHeroDetailsFragmentConditionalInclusion", testHeroDetailsFragmentConditionalInclusion),
        ("testHeroDetailsInlineConditionalInclusion", testHeroDetailsInlineConditionalInclusion),
        ("testHeroDetailsQueryDroid", testHeroDetailsQueryDroid),
        ("testHeroDetailsQueryHuman", testHeroDetailsQueryHuman),
        ("testHeroDetailsWithFragmentQueryDroid", testHeroDetailsWithFragmentQueryDroid),
        ("testHeroDetailsWithFragmentQueryHuman", testHeroDetailsWithFragmentQueryHuman),
        ("testHeroFriendsOfFriendsNamesQuery", testHeroFriendsOfFriendsNamesQuery),
        ("testHeroNameConditionalBoth", testHeroNameConditionalBoth),
        ("testHeroNameConditionalBothSeparate", testHeroNameConditionalBothSeparate),
        ("testHeroNameConditionalExclusion", testHeroNameConditionalExclusion),
        ("testHeroNameConditionalInclusion", testHeroNameConditionalInclusion),
        ("testHeroNameQuery", testHeroNameQuery),
        ("testHeroNameQueryWithVariable", testHeroNameQueryWithVariable),
        ("testHeroNameTypeSpecificConditionalInclusion", testHeroNameTypeSpecificConditionalInclusion),
        ("testHeroParentTypeDependentFieldDroid", testHeroParentTypeDependentFieldDroid),
        ("testHeroParentTypeDependentFieldHuman", testHeroParentTypeDependentFieldHuman),
        ("testHeroTypeDependentAliasedFieldDroid", testHeroTypeDependentAliasedFieldDroid),
        ("testHeroTypeDependentAliasedFieldHuman", testHeroTypeDependentAliasedFieldHuman),
        ("testHumanQueryWithNullMass", testHumanQueryWithNullMass),
        ("testHumanQueryWithNullResult", testHumanQueryWithNullResult),
        ("testStarshipCoordinates", testStarshipCoordinates),
    ]
}

extension WatchQueryTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WatchQueryTests = [
        ("testRefetchWatchedQuery", testRefetchWatchedQuery),
        ("testWatchedListModifyingQueryWithID", testWatchedListModifyingQueryWithID),
        ("testWatchedQueryDoesNotRefetchAfterUnrelatedQuery", testWatchedQueryDoesNotRefetchAfterUnrelatedQuery),
        ("testWatchedQueryGetsUpdatedWithListReorderingFromOtherQuery", testWatchedQueryGetsUpdatedWithListReorderingFromOtherQuery),
        ("testWatchedQueryGetsUpdatedWithResultFromOtherQuery", testWatchedQueryGetsUpdatedWithResultFromOtherQuery),
        ("testWatchedQueryGetsUpdatedWithResultFromReadWriteTransaction", testWatchedQueryGetsUpdatedWithResultFromReadWriteTransaction),
        ("testWatchedQueryWithID", testWatchedQueryWithID),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(FetchQueryTests.__allTests__FetchQueryTests),
        testCase(LoadQueryFromStoreTests.__allTests__LoadQueryFromStoreTests),
        testCase(ReadWriteFromStoreTests.__allTests__ReadWriteFromStoreTests),
        testCase(SQLiteFetchQueryTests.__allTests__SQLiteFetchQueryTests),
        testCase(SQLiteLoadQueryFromStoreTests.__allTests__SQLiteLoadQueryFromStoreTests),
        testCase(SQLiteReadWriteFromStoreTests.__allTests__SQLiteReadWriteFromStoreTests),
        testCase(SQLiteStarWarsServerAPQsGetMethodTests.__allTests__SQLiteStarWarsServerAPQsGetMethodTests),
        testCase(SQLiteStarWarsServerAPQsTests.__allTests__SQLiteStarWarsServerAPQsTests),
        testCase(SQLiteStarWarsServerCachingRoundtripTests.__allTests__SQLiteStarWarsServerCachingRoundtripTests),
        testCase(SQLiteStarWarsServerTests.__allTests__SQLiteStarWarsServerTests),
        testCase(SQLiteWatchQueryTests.__allTests__SQLiteWatchQueryTests),
        testCase(StarWarsServerAPQsGetMethodTests.__allTests__StarWarsServerAPQsGetMethodTests),
        testCase(StarWarsServerAPQsTests.__allTests__StarWarsServerAPQsTests),
        testCase(StarWarsServerCachingRoundtripTests.__allTests__StarWarsServerCachingRoundtripTests),
        testCase(StarWarsServerTests.__allTests__StarWarsServerTests),
        testCase(WatchQueryTests.__allTests__WatchQueryTests),
    ]
}
#endif
